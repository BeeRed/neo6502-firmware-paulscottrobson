// *******************************************************************************************************************************
// *******************************************************************************************************************************
//
//		Name:		6502.cpp
//		Purpose:	6502 Processor Emulation.
//		Created:	28th April 2024
//		Author:		Paul Robson (paul@robsons.org.uk)
//
// *******************************************************************************************************************************
// *******************************************************************************************************************************

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <cstdint>
#include "sys_processor.h"
#include "sys_debug_system.h"
#include "hardware.h"
#include "common.h"

// *******************************************************************************************************************************
//
//														CPU / Memory
//
// *******************************************************************************************************************************

static BYTE8 a,x,y,s;																// 6502 A,X,Y and Stack registers
static BYTE8 carryFlag,interruptDisableFlag,breakFlag,								// Values representing status reg
			 decimalFlag,overflowFlag,sValue,zValue;
static WORD16 pc;

// *******************************************************************************************************************************
//
//												Generated support functions
//
// *******************************************************************************************************************************

#include "6502/__6502support.h"

// *******************************************************************************************************************************
//
//														Reset 6502
//
// *******************************************************************************************************************************

void CPUReset6502(void) {
	resetProcessor();																// Reset CPU		
}

// *******************************************************************************************************************************
//
//												Execute a single 6502 instruction
//
// *******************************************************************************************************************************

BYTE8 CPUExecute6502(void) {
	BYTE8 opcode = Fetch();															// Fetch opcode.
	BYTE8 forceSync = 0;
	switch(opcode) {																// Execute it.
		#include "6502/__6502opcodes.h"

		case 0xF3: 	 																// $F3 forces sync in emulator. Not needed in real hardware.
			forceSync = 1;break;
	}
	return forceSync;
}

// *******************************************************************************************************************************
//
//															Get 6502 PC
//
// *******************************************************************************************************************************

WORD16 CPUGetPC65(void) {
	return pc;
}

// *******************************************************************************************************************************
//
//											Retrieve a snapshot of the processor
//
// *******************************************************************************************************************************

static CPUSTATUS65 st;																	// Status area

CPUSTATUS65 *CPUGetStatus65(void) {
	st.a = a;st.x = x;st.y = y;st.sp = s;st.pc = pc;
	st.carry = carryFlag;st.interruptDisable = interruptDisableFlag;st.zero = (zValue == 0);
	st.decimal = decimalFlag;st.brk = breakFlag;st.overflow = overflowFlag;
	st.sign = (sValue & 0x80) != 0;st.status = constructFlagRegister();
	st.cycles = cycles;
	return &st;
}

// *******************************************************************************************************************************
//
//											  Handle skipping subroutine calls
//
// *******************************************************************************************************************************

int CPUGetStep65(BYTE8 opcode) {
	return (opcode == 0x20) ? 3 : 0;
}
