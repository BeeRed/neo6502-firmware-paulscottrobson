// *******************************************************************************************************************************
// *******************************************************************************************************************************
//
//		Name:		sweet16.cpp
//		Purpose:	Sweet16 Processor Emulation.
//		Created:	29th April 2024
//		Author:		Paul Robson (paul@robsons.org.uk)
//
// *******************************************************************************************************************************
// *******************************************************************************************************************************

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <cstdint>
#include "sys_processor.h"
#include "sys_debug_system.h"
#include "hardware.h"
#include "common.h"


// *******************************************************************************************************************************
//
//														Reset Sweet16
//
// *******************************************************************************************************************************

void CPUReset16(void) {
	// Not possible !
}

// *******************************************************************************************************************************
//
//												Execute a single 6502 instruction
//
// *******************************************************************************************************************************

BYTE8 CPUExecute16(void) {
	BYTE8 r = SW16ExecuteOne(0);
	cycles++;
	return 0;
}

// *******************************************************************************************************************************
//
//															Get 6502 PC
//
// *******************************************************************************************************************************

WORD16 CPUGetPC16(void) {
	return CPUReadMemory(30)+(CPUReadMemory(31) << 8);
}

// *******************************************************************************************************************************
//
//											  Handle skipping subroutine calls
//
// *******************************************************************************************************************************

int CPUGetStep16(BYTE8 opcode) {
	if (opcode == 0x0C) return 2;
	if (opcode == 0x0D) return 3;
	return 0;
}
