# ***************************************************************************************
# ***************************************************************************************
#
#      Name :      sweet16.gen
#      Authors :   Paul Robson (paul$Robsons.org.uk)
#      Date :      10th April 2024
#      Reviewed :  No
#      Purpose :   Sweet 16 emulation code source.
#
# ***************************************************************************************
# ***************************************************************************************


# ***************************************************************************************
# 								1x ll hh : Load constant
# ***************************************************************************************

1? 		"SET R$R,$2"
		R($R) = FETCH16();
		SETCOMP($R);

# ***************************************************************************************
# 								2x : Load R0 from Rx
# ***************************************************************************************

2? 		"LD R$R"
		R(0) = R($R);
		SETCOMP($R);

# ***************************************************************************************
# 								3x : Store R0 to Rx
# ***************************************************************************************

3? 		"ST R$R"
		R($R) = R(0);
		SETCOMP($R);

# ***************************************************************************************
# 					  4x : Load byte R0 from Rx, post increment
# ***************************************************************************************

4? 		"LD @R$R"
		R(0) = READ8(R($R));
		R($R)++;
		SETCOMP($R);

# ***************************************************************************************
# 					  5x : Store byte R0 to Rx, post increment
# ***************************************************************************************

5? 		"LD @R$R"
		WRITE8(R($R),R(0));
		R($R)++;
		SETCOMP($R);

# ***************************************************************************************
# 					  6x : Load word R0 from Rx, post increment
# ***************************************************************************************

6? 		"LDD @R$R"
		R(0) = READ16(R($R));
		R($R) += 2;		
		SETCOMP($R);

# ***************************************************************************************
# 					  7x : Store word R0 to Rx, post increment
# ***************************************************************************************

7? 		"STD @R$R"
		WRITE16(R($R),R(0));
		R($R) += 2;
		SETCOMP($R);

# ***************************************************************************************
# 					  8x : Load byte R0 from Rx, pre decrement
# ***************************************************************************************

8? 		"POP @R$R"
		R($R)--;		
		R(0) = READ8(R($R));

# ***************************************************************************************
# 					  9x : Store byte R0 to Rx, pre decrement
# ***************************************************************************************

9? 		"STP @R$R"
		R($R)--;
		WRITE8(R($R),R(0));
		SETCOMP($R);

# ***************************************************************************************
# 					  Ax : Add Rx to R0, carry out, test R0
# ***************************************************************************************

A? 		"ADD R$R"
		R(0) = ADD16(R(0),R($R),0);
		SETCOMP(0);

# ***************************************************************************************
# 					  Bx : Sub Rx from R0, carry out, test R0
# ***************************************************************************************

B? 		"SUB R$R"
		R(0) = ADD16(R(0),R($R) ^ 0xFFFF,1);
		SETCOMP(0);

# ***************************************************************************************
# 					  Cx : Load word R0 from Rx, pre decrement
# ***************************************************************************************

C? 		"POPD @R$R"
		R($R) -= 2;		
		R(0) = READ16(R($R));
		SETCOMP($R);

# ***************************************************************************************
# 					Dx : Sub Rx from R0 to R13, carry out, test R13
# ***************************************************************************************

D? 		"CPR R$R"
		R(13) = ADD16(R(0),R($R) ^ 0xFFFF,1);
		SETCOMP(13);

# ***************************************************************************************
# 									Ex : Increment Rx
# ***************************************************************************************

E? 		"INR R$R"
		R($R)++;
		CLEARCARRY();
		SETCOMP($R);

# ***************************************************************************************
# 									Fx : Decrement Rx
# ***************************************************************************************

F? 		"DCR R$R"
		R($R)--;
		CLEARCARRY();
		SETCOMP($R);

# ***************************************************************************************
# 								 00 RTN : exit to 6502
# ***************************************************************************************

00 		"RTN"
		bQuitSweet = true;

# ***************************************************************************************
# 								  01-09 : Branches
# ***************************************************************************************

01 		"BR $1"
		BRANCHIF(1);

02 		"BNC $1"
		BRANCHIF(CARRY() == 0);

03 		"BC $1"
		BRANCHIF(CARRY() != 0);

04 		"BP $1"
		BRANCHIF((TESTVALUE() & 0x8000) == 0);

05 		"BM $1"
		BRANCHIF((TESTVALUE() & 0x8000) != 0);

06 		"BZ $1"
		BRANCHIF(TESTVALUE() == 0);

07 		"BNZ $1"
		BRANCHIF(TESTVALUE() != 0);

08 		"BM1 $1"
		BRANCHIF(TESTVALUE() == 0xFFFF);

09 		"BNM1 $1"
		BRANCHIF(TESTVALUE() != 0xFFFF);

# ***************************************************************************************
# 								 0A BK : debug dump
# ***************************************************************************************

0A 		"BK"
		;

# ***************************************************************************************
# 							0B RS : subroutine return
# ***************************************************************************************

0B 		"RS"
		R(12) -= 2;
		R(15) = READ16(R(12));

# ***************************************************************************************
# 					0C BS : branch to subroutine (relative short)
# ***************************************************************************************

0C 		"BS $1"
		WRITE16(R(12),R(15)+1);
		R(12) += 2;
		BRANCHIF(1);
		CLEARCARRY();
		SETCOMP(0);

# ***************************************************************************************
#
#							Extensions to the Sweet 16 standard
#
# ***************************************************************************************

# ***************************************************************************************
# 					0D BSL : branch to subroutine (relative long)
# ***************************************************************************************

0D 		"BSL $2"
		WRITE16(R(12),R(15)+2);
		R(12) += 2;
		temp = FETCH16();
		R(15) += temp;
		CLEARCARRY();
		SETCOMP(0);


